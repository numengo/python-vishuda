{
  "$id": "https://numengo.org/telebot#",
  "type": "object",
  "$comment": "automatically generated for telebot",
  "description": "This objects represents a Telegram bot. It allows you to add handlers for different kind of updates.",
  "$defs": {
    "EntryPoint": {
      "type": "object",
      "extends": [
        "https://numengo.org/vishuda#/$defs/app/$defs/EntryPoint",
        "#/$defs/actions/$defs/Action"
      ],
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/actions/$defs/Action"
          }
        }
      }
    },
    "Telebot": {
      "type": "object",
      "extends": [
        "https://numengo.org/vishuda#/$defs/app/$defs/App"
      ],
      "additionalProperties": true,
      "aliases": {
        "plugins": "entry_points"
      },
      "notSerialized": [
        "token"
      ],
      "required": [
        "token",
        "telebot_name"
      ],
      "properties": {
        "telebot_name": {
          "type": "string",
          "description": "Bot name"
        },
        "token": {
          "type": "string",
          "description": "bot API token"
        },
        "threaded": {
          "type": "boolean"
        },
        "num_threads": {
          "type": "integer",
          "default": 2
        },
        "labels": {
          "type": "array",
          "description": "labels to make reference to for callback data (automatically numbered)"
        },
        "entry_points": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/EntryPoint"
          }
        },
        "handlers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/handlers/$defs/Handler"
          }
        },
        "inline_handlers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/handlers/$defs/Handler"
          }
        },
        "callback_query_handlers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/handlers/$defs/CallbackQueryHandler"
          }
        },
        "middleware_handlers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/handlers/$defs/MiddlewareHandler"
          }
        },
        "conversation_handlers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/handlers/$defs/ConversationHandler"
          }
        }
      }
    },
    "Enums": {
      "type": "object",
      "properties": {
        "content_type_media": {
          "type": "string",
          "enum": [
            "text",
            "audio",
            "animatio",
            "document",
            "photo",
            "sticker",
            "video",
            "video_no",
            "voice",
            "contact",
            "dice",
            "poll",
            "venue",
            "location"
          ]
        },
        "content_type_service": {
          "type": "string",
          "enum": [
            "new_chat_members",
            "left_chat_member",
            "new_chat_title",
            "new_chat_photo",
            "delete_chat_photo",
            "group_chat_created",
            "supergroup_chat_created",
            "channel_chat_created",
            "migrate_to_chat_id",
            "migrate_from_chat_id",
            "pinned_message",
            "proximity_alert_triggered",
            "voice_chat_scheduled",
            "voice_chat_started",
            "voice_chat_ended",
            "voice_chat_participants_invited",
            "message_auto_delete_timer_changed"
          ]
        },
        "update_types": {
          "type": "string",
          "enum": [
            "update_id",
            "message",
            "edited_message",
            "channel_post",
            "edited_channel_post",
            "inline_query",
            "chosen_inline_result",
            "callback_query",
            "shipping_query",
            "pre_checkout_query",
            "poll",
            "poll_answer",
            "my_chat_member",
            "chat_member"
          ]
        }
      }
    },
    "actions": {
      "type": "object",
      "$defs": {
        "Action": {
          "type": "object",
          "extends": [
            "https://numengo.org/ngoschema#/$defs/instances/$defs/Instance"
          ],
          "abstract": true,
          "notSerialized": [
            "_type"
          ],
          "primaryKeys": [
            "name"
          ],
          "properties": {
            "_type": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "triggers": {
              "type": "array"
            },
            "decorators": {
              "type": "array"
            },
            "arguments": {
              "type": "array"
            },
            "help": {
              "type": "string"
            },
            "example": {
              "type": "string"
            },
            "emojis": {
              "type": "array"
            },
            "emojis_after": {
              "type": "array"
            }
          }
        },
        "Command": {
          "type": "object",
          "extends": [
            "#/$defs/actions/$defs/Action"
          ],
          "_type": "command"
        },
        "Button": {
          "type": "object",
          "extends": [
            "#/$defs/actions/$defs/Action"
          ],
          "_type": "button",
          "properties": {
            "btn": {
              "type": "string"
            }
          }
        },
        "Message": {
          "type": "object",
          "extends": [
            "#/$defs/actions/$defs/Action"
          ],
          "_type": "message"
        }
      }
    },
    "filters": {
      "type": "object",
      "$defs": {
        "BaseFilter": {
          "type": "object",
          "abstract": true
        },
        "MessageFilter": {
          "type": "object",
          "extends": [
            "#/$defs/filters/$defs/BaseFilter"
          ],
          "required": [
            "filter_type"
          ],
          "properties": {
            "filter_type": {
              "type": "string",
              "enum": [
                "all",
                "text",
                "caption",
                "command",
                "regex",
                "caption_regex",
                "reply",
                "audio",
                "document",
                "animation",
                "photo",
                "sticker",
                "video",
                "voice",
                "video_note",
                "contact",
                "location",
                "venue",
                "status_update",
                "forwarded",
                "game",
                "entity",
                "caption_entity",
                "private",
                "group",
                "chat_type",
                "user",
                "is_automatic_forward",
                "has_protected_content",
                "invoice",
                "successful_payment",
                "passport_data",
                "poll",
                "dice",
                "language",
                "attachment",
                "update"
              ]
            },
            "call_back_method": {
              "type": "importable"
            }
          }
        },
        "UpdateFilter": {
          "type": "object",
          "extends": [
            "#/$defs/filters/$defs/BaseFilter"
          ]
        },
        "InvertedFilter": {
          "type": "object",
          "extends": [
            "#/$defs/filters/$defs/UpdateFilter"
          ]
        },
        "MergedFilter": {
          "type": "object",
          "extends": [
            "#/$defs/filters/$defs/UpdateFilter"
          ]
        },
        "XORFilter": {
          "type": "object",
          "extends": [
            "#/$defs/filters/$defs/UpdateFilter"
          ]
        },
        "CustomFilter": {
          "type": "object",
          "extends": [
            "https://numengo.org/ngoschema#/$defs/instances/$defs/Instance"
          ],
          "primaryKeys": [
            "symbol"
          ],
          "properties": {
            "symbol": {
              "type": "string"
            },
            "key": {
              "type": "string",
              "enum": [
                "text",
                "text_contains",
                "text_startswith",
                "chat_id",
                "is_forwarded",
                "is_reply",
                "language_code",
                "is_chat_admin",
                "state",
                "is_digit"
              ]
            },
            "return": {
              "type": "string"
            }
          }
        }
      }
    },
    "context": {
      "type": "object",
      "$defs": {
        "ContextTypes": {
          "type": "object",
          "properties": {
            "bot_data": {
              "type": "object"
            },
            "chat_data": {
              "type": "object"
            },
            "user_data": {
              "type": "object"
            }
          }
        }
      }
    },
    "handlers": {
      "type": "object",
      "$defs": {
        "Handler": {
          "type": "object",
          "required": [
            "callback"
          ],
          "properties": {
            "content_types": {
              "type": "array"
            },
            "regexp": {
              "type": "string"
            },
            "commands": {
              "type": "array"
            },
            "chat_types": {
              "type": "array"
            },
            "func": {
              "type": "string"
            }
          }
        },
        "MessageHandler": {
          "type": "object",
          "description": "Handler class to handle telegram messages. They might contain text, media or status updates.",
          "extends": [
            "#/$defs/handlers/$defs/Handler"
          ],
          "properties": {
            "filters": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/filters/$defs/BaseFilter"
              }
            }
          }
        },
        "CallbackQueryHandler": {
          "type": "object",
          "extends": [
            "#/$defs/handlers/$defs/Handler"
          ],
          "properties": {
            "pattern": true
          }
        },
        "ConversationHandler": {
          "type": "object",
          "description": "A handler to hold a conversation with a single or multiple users through Telegram updates by managing four collections of other handlers.\n\nThe first collection, a ``list`` named :attr:`entry_points`, is used to initiate the conversation, for example with a :class:`telegram.ext.CommandHandler` or :class:`telegram.ext.MessageHandler`.\n\nThe second collection, a ``dict`` named :attr:`states`, contains the different conversation steps and one or more associated handlers that should be used if the user sends a message when the conversation with them is currently in that state. Here you can also define a state for `TIMEOUT` to define the behavior where `conversation_timeout` is exceeded, and a state for`WAITING` to define behavior when a new update is received while the previous ``@run_async`` decorated handler is not finished.\n\nThe third collection, a ``list`` named :attr:`fallbacks`, is used if the user is currently in a conversation but the state has either no associated handler or the handler that is associated to the state is inappropriate for the update, for example if the update contains a command, but a regular text message is expected. You could use this for a ``/cancel`` command or to let the user know their message was not recognized.\n\nTo change the state of conversation, the callback function of a handler must return the new state after responding to the user. If it does not return anything (returning :obj:`None` by default), the state will not change. If an entry point callback function returns :obj:`None`, the conversation ends immediately after the execution of this callback function.\nTo end the conversation, the callback function must return :attr:`END` or ``-1``. To handle the conversation timeout, use handler :attr:`TIMEOUT` or ``-2``.\nFinally, :class:`telegram.ext.DispatcherHandlerStop` can be used in conversations as described in the corresponding documentation.\n\nNote:\nIn each of the described collections of handlers, a handler may in turn be a `ConversationHandler`. In that case, the nested :class:`ConversationHandler` should have the attribute :attr:`map_to_parent` which allows to return to the parent conversation at specified states within the nested conversation.\n\nNote that the keys in :attr:`map_to_parent` must not appear as keys in :attr:`states` attribute or else the latter will be ignored. You may map :attr:`END` to one of the parents states to continue the parent conversation after this has ended or even map a state to :attr:`END` to end the *parent* conversation from within the nested one. For an example on nested :class:`ConversationHandler` s, see our `examples`_.",
          "extends": [
            "#/$defs/handlers/$defs/Handler"
          ],
          "properties": {
            "entry_points": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/handlers/$defs/Handler"
              }
            },
            "callback": {
              "type": "string"
            },
            "states": {
              "type": "object",
              "additionalProperties": {
                "type": "array"
              }
            },
            "fallbacks": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/handlers/$defs/Handler"
              }
            },
            "allow_reentry": {
              "type": "boolean"
            },
            "per_chat": {
              "type": "boolean"
            },
            "per_user": {
              "type": "boolean"
            },
            "per_message": {
              "type": "boolean"
            },
            "conversation_timeout": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "persistent": {
              "type": "boolean"
            },
            "map_to_parent": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "ChatMemberHandler": {
          "type": "object",
          "description": "Handler class to handle Telegram updates that contain a chat member update.",
          "extends": [
            "#/$defs/handlers/$defs/Handler"
          ],
          "properties": {
            "chat_member_types": {
              "type": "string",
              "enum": [
                "MY_CHAT_MEMBER",
                "CHAT_MEMBER",
                "ANY_CHAT_MEMBER"
              ]
            }
          }
        },
        "MiddlewareHandler": {
          "type": "object",
          "extends": [
            "#/$defs/handlers/$defs/Handler"
          ],
          "properties": {
            "update_types": {
              "type": "array"
            }
          }
        },
        "CommandHandler": {
          "type": "object",
          "extends": [
            "#/$defs/handlers/$defs/Handler"
          ]
        },
        "RegexHandler": {
          "type": "object",
          "extends": [
            "#/$defs/handlers/$defs/Handler"
          ]
        }
      }
    },
    "markup": {
      "type": "object",
      "$defs": {
        "KeyboardMarkup": {
          "type": "object",
          "extends": [
            "https://numengo.org/telegram#/$defs/KeyboardMarkup"
          ]
        },
        "KeyboardButton": {
          "type": "object",
          "extends": [
            "https://numengo.org/telegram#/$defs/KeyboardButton"
          ]
        },
        "ReplyKeyboardMarkup": {
          "type": "object",
          "extends": [
            "https://numengo.org/telegram#/$defs/ReplyKeyboardMarkup",
            "#/$defs/markup/$defs/KeyboardMarkup"
          ]
        },
        "ReplyKeyboardRemove": {
          "type": "object",
          "extends": [
            "https://numengo.org/telegram#/$defs/ReplyKeyboardRemove"
          ]
        },
        "ForceReply": {
          "type": "object",
          "extends": [
            "https://numengo.org/telegram#/$defs/ForceReply"
          ]
        },
        "InlineKeyboardMarkup": {
          "type": "object",
          "extends": [
            "https://numengo.org/telegram#/$defs/InlineKeyboardMarkup"
          ]
        },
        "InlineKeyboardButton": {
          "type": "object",
          "extends": [
            "https://numengo.org/telegram#/$defs/InlineKeyboardButton"
          ]
        }
      }
    }
  }
}