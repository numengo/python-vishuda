{
  "$id": "https://numengo.org/telegram#",
  "type": "object",
  "$comment": "automatically generated for telegram",
  "description": "https://core.telegram.org/bots/api",
  "$defs": {
    "User": {
      "type": "object",
      "description": "This object represents a Telegram user or bot.",
      "required": [
        "id",
        "first_name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier."
        },
        "is_bot": {
          "type": "boolean"
        },
        "first_name": {
          "type": "string",
          "description": "User's or bot's first name"
        },
        "last_name": {
          "type": "string",
          "description": "User's or bot's last name"
        },
        "username": {
          "type": "string",
          "description": "User's or bot's username"
        },
        "language_code": {
          "type": "string",
          "description": "IETF language tag of the user's language"
        },
        "can_join_groups": {
          "type": "boolean",
          "description": "True, if the bot can be invited to groups."
        },
        "can_read_all_group_messages": {
          "type": "boolean",
          "description": "True, if privacy mode is disabled for the bot."
        },
        "supports_inline_queries": {
          "type": "boolean",
          "description": "True, if the bot supports inline queries."
        }
      }
    },
    "Chat": {
      "type": "object",
      "description": "This object represents a chat.",
      "primaryKeys": [
        "id"
      ],
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
        },
        "_type": {
          "type": "string",
          "description": "Type of chat, can be either “private”, “group”, “supergroup” or “channel”",
          "enum": [
            "private",
            "group",
            "supergroup",
            "channel"
          ]
        },
        "title": {
          "type": "string",
          "description": "Title, for supergroups, channels and group chats"
        },
        "username": {
          "type": "string",
          "description": "Username, for private chats, supergroups and channels if available"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the other party in a private chat"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the other party in a private chat"
        },
        "photo": {
          "$ref": "#/$defs/ChatPhoto"
        },
        "bio": {
          "type": "string",
          "description": "Bio of the other party in a private chat."
        },
        "has_private_forwards": {
          "type": "boolean",
          "description": "True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user."
        },
        "description": {
          "type": "string",
          "description": "Description, for groups, supergroups and channel chats."
        },
        "invite_link": {
          "type": "string",
          "description": "Primary invite link, for groups, supergroups and channel chats."
        },
        "pinned_message": {
          "$ref": "#/$defs/Message"
        },
        "permissions": {
          "$ref": "#/$defs/ChatPermissions"
        },
        "slow_mode_delay": {
          "type": "integer",
          "description": "For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user; in seconds."
        },
        "message_auto_delete_time": {
          "type": "integer",
          "description": "The time after which all messages sent to the chat will be automatically deleted; in seconds."
        },
        "has_protected_content": {
          "type": "boolean",
          "description": "True, if messages from the chat can't be forwarded to other chats."
        },
        "sticker_set_name": {
          "type": "string",
          "description": "For supergroups, name of group sticker set."
        },
        "can_set_sticker_set": {
          "type": "boolean",
          "description": "True, if the bot can change the group sticker set."
        },
        "linked_chat_id": {
          "type": "integer",
          "description": "Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier."
        },
        "location": {
          "$ref": "#/$defs/ChatLocation"
        }
      }
    },
    "Message": {
      "type": "object",
      "description": "This object represents a message.",
      "primaryKeys": [
        "message_id"
      ],
      "required": [
        "message_id"
      ],
      "properties": {
        "message_id": {
          "type": "integer",
          "description": "Unique message identifier inside this chat"
        },
        "from": {
          "$ref": "#/$defs/User"
        },
        "sender_chat": {
          "$ref": "#/$defs/Chat"
        },
        "date": {
          "type": "integer",
          "description": "Date the message was sent in Unix time"
        },
        "chat": {
          "$ref": "#/$defs/Chat"
        },
        "forward_from": {
          "$ref": "#/$defs/User"
        },
        "forward_from_chat": {
          "$ref": "#/$defs/Chat"
        },
        "forward_from_message_id": {
          "type": "integer",
          "description": "For messages forwarded from channels, identifier of the original message in the channel"
        },
        "forward_signature": {
          "type": "string",
          "description": "For forwarded messages that were originally sent in channels or by an anonymous chat administrator, signature of the message sender if present"
        },
        "forward_sender_name": {
          "type": "string",
          "description": "Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages"
        },
        "forward_date": {
          "type": "integer",
          "description": "For forwarded messages, date the original message was sent in Unix time"
        },
        "is_automatic_forward": {
          "type": "boolean",
          "description": "True, if the message is a channel post that was automatically forwarded to the connected discussion group"
        },
        "reply_to_message": {
          "$ref": "#/$defs/Message"
        },
        "via_bot": {
          "$ref": "#/$defs/User"
        },
        "edit_date": {
          "type": "integer",
          "description": "Date the message was last edited in Unix time"
        },
        "has_protected_content": {
          "type": "boolean",
          "description": "True, if the message can't be forwarded"
        },
        "media_group_id": {
          "type": "string",
          "description": "The unique identifier of a media message group this message belongs to"
        },
        "author_signature": {
          "type": "string",
          "description": "Signature of the post author for messages in channels, or the custom title of an anonymous group administrator"
        },
        "text": {
          "type": "string",
          "description": "For text messages, the actual UTF-8 text of the message, 0-4096 characters"
        },
        "entities": {
          "type": "array",
          "description": "For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text",
          "items": {
            "$ref": "#/$defs/MessageEntity"
          }
        },
        "animation": {
          "$ref": "#/$defs/Animation"
        },
        "audio": {
          "$ref": "#/$defs/Audio"
        },
        "document": {
          "$ref": "#/$defs/Document"
        },
        "photo": {
          "type": "array",
          "description": "Message is a photo, available sizes of the photo",
          "items": {
            "$ref": "#/$defs/PhotoSize"
          }
        },
        "sticker": {
          "$ref": "#/$defs/Sticker"
        },
        "video": {
          "$ref": "#/$defs/Video"
        },
        "video_note": {
          "$ref": "#/$defs/VideoNote"
        },
        "voice": {
          "$ref": "#/$defs/Voice"
        },
        "caption": {
          "type": "string",
          "description": "Caption for the animation, audio, document, photo, video or voice, 0-1024 characters"
        },
        "caption_entities": {
          "type": "array",
          "description": "For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption",
          "items": {
            "$ref": "#/$defs/MessageEntity"
          }
        },
        "contact": {
          "$ref": "#/$defs/Contact"
        },
        "dice": {
          "$ref": "#/$defs/Dice"
        },
        "game": {
          "$ref": "#/$defs/Game"
        },
        "poll": {
          "$ref": "#/$defs/Poll"
        },
        "venue": {
          "$ref": "#/$defs/Venue"
        },
        "location": {
          "$ref": "#/$defs/Location"
        },
        "new_chat_members": {
          "type": "array",
          "description": "New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)",
          "items": {
            "$ref": "#/$defs/User"
          }
        },
        "left_chat_member": {
          "$ref": "#/$defs/User"
        },
        "new_chat_title": {
          "type": "string",
          "description": "A chat title was changed to this value"
        },
        "new_chat_photo": {
          "type": "array",
          "description": "A chat photo was change to this value",
          "items": {
            "$ref": "#/$defs/PhotoSize"
          }
        },
        "delete_chat_photo": {
          "type": "boolean",
          "description": "Service message: the chat photo was deleted"
        },
        "group_chat_created": {
          "type": "boolean",
          "description": "Service message: the group has been created"
        },
        "supergroup_chat_created": {
          "type": "boolean",
          "description": "Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup."
        },
        "channel_chat_created": {
          "type": "boolean",
          "description": "Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel."
        },
        "message_auto_delete_timer_changed": {
          "$ref": "#/$defs/MessageAutoDeleteTimerChanged"
        },
        "migrate_to_chat_id": {
          "type": "integer",
          "description": "The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
        },
        "migrate_from_chat_id": {
          "type": "integer",
          "description": "The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
        },
        "pinned_message": {
          "$ref": "#/$defs/Message"
        },
        "invoice": {
          "$ref": "#/$defs/Invoice"
        },
        "successful_payment": {
          "$ref": "#/$defs/SuccessfulPayment"
        },
        "connected_website": {
          "type": "string",
          "description": "The domain name of the website on which the user has logged in."
        },
        "passport_data": {
          "$ref": "#/$defs/PassportData"
        },
        "proximity_alert_triggered": {
          "$ref": "#/$defs/ProximityAlertTriggered"
        },
        "voice_chat_scheduled": {
          "$ref": "#/$defs/VoiceChatScheduled"
        },
        "voice_chat_started": {
          "$ref": "#/$defs/VoiceChatStarted"
        },
        "voice_chat_ended": {
          "$ref": "#/$defs/VoiceChatEnded"
        },
        "voice_chat_participants_invited": {
          "$ref": "#/$defs/VoiceChatParticipantsInvited"
        },
        "reply_markup": {
          "$ref": "#/$defs/InlineKeyboardMarkup"
        }
      }
    },
    "MessageId": {
      "type": "object",
      "description": "This object represents a unique message identifier.",
      "properties": {
        "message_id": {
          "type": "integer",
          "description": "Unique message identifier."
        }
      }
    },
    "MessageEntity": {
      "type": "object",
      "description": "This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.",
      "required": [
        "_type",
        "offset",
        "length"
      ],
      "properties": {
        "_type": {
          "type": "string",
          "description": "Type of the entity. Currently, can be “mention” (@username), “hashtag” (#hashtag), “cashtag” ($USD), “bot_command” (/start@jobs_bot), “url” (https://telegram.org), “email” (do-not-reply@telegram.org), “phone_number” (+1-212-555-0123), “bold” (bold text), “italic” (italic text), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users without usernames)"
        },
        "offset": {
          "type": "integer",
          "description": "Offset in UTF-16 code units to the start of the entity"
        },
        "length": {
          "type": "integer",
          "description": "Length of the entity in UTF-16 code units"
        },
        "url": {
          "type": "string",
          "description": "For “text_link” only, url that will be opened after user taps on the text"
        },
        "user": {
          "$ref": "#/$defs/User"
        },
        "language": {
          "type": "string",
          "description": "For “pre” only, the programming language of the entity text"
        }
      }
    },
    "PhotoSize": {
      "type": "object",
      "description": "This object represents one size of a photo or a file / sticker thumbnail.",
      "required": [
        "file_id",
        "file_unique_id",
        "width",
        "height"
      ],
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "width": {
          "type": "integer"
        },
        "height": {
          "type": "integer"
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes."
        }
      }
    },
    "Animation": {
      "type": "object",
      "description": "This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).",
      "required": [
        "file_id",
        "file_unique_id",
        "width",
        "height",
        "duration"
      ],
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "width": {
          "type": "integer",
          "description": "Video width as defined by sender"
        },
        "height": {
          "type": "integer",
          "description": "Video height as defined by sender"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the video in seconds as defined by sender"
        },
        "thumb": {
          "$ref": "#/$defs/PhotoSize"
        },
        "file_name": {
          "type": "string",
          "description": "Original animation filename as defined by sender"
        },
        "mime_type": {
          "type": "string",
          "description": "MIME type of the file as defined by sender"
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes"
        }
      }
    },
    "Audio": {
      "type": "object",
      "description": "This object represents an audio file to be treated as music by the Telegram clients.",
      "required": [
        "file_id",
        "file_unique_id",
        "duration"
      ],
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the audio in seconds as defined by sender"
        },
        "performer": {
          "type": "string",
          "description": "Performer of the audio as defined by sender or by audio tags"
        },
        "title": {
          "type": "string",
          "description": "Title of the audio as defined by sender or by audio tags"
        },
        "file_name": {
          "type": "string",
          "description": "Original filename as defined by sender"
        },
        "mime_type": {
          "type": "string",
          "description": "MIME type of the file as defined by sender"
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes"
        },
        "thumb": {
          "$ref": "#/$defs/PhotoSize"
        }
      }
    },
    "Document": {
      "type": "object",
      "description": "This object represents a general file (as opposed to photos, voice messages and audio files).",
      "required": [
        "file_id",
        "file_unique_id"
      ],
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "thumb": {
          "$ref": "#/$defs/PhotoSize"
        },
        "file_name": {
          "type": "string",
          "description": "Original filename as defined by sender"
        },
        "mime_type": {
          "type": "string",
          "description": "MIME type of the file as defined by sender"
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes."
        }
      }
    },
    "Video": {
      "type": "object",
      "description": "This object represents a video file.",
      "required": [
        "file_id",
        "file_unique_id",
        "width",
        "height",
        "duration"
      ],
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "width": {
          "type": "integer",
          "description": "Video width as defined by sender"
        },
        "height": {
          "type": "integer",
          "description": "Video height as defined by sender"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the video in seconds as defined by sender"
        },
        "thumb": {
          "$ref": "#/$defs/PhotoSize"
        },
        "file_name": {
          "type": "string",
          "description": "Original filename as defined by sender"
        },
        "mime_type": {
          "type": "string",
          "description": "Mime type of a file as defined by sender"
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes."
        }
      }
    },
    "VideoNote": {
      "type": "object",
      "description": "This object represents a video message (available in Telegram apps as of v.4.0).",
      "required": [
        "file_id",
        "file_unique_id",
        "length",
        "duration"
      ],
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "length": {
          "type": "integer",
          "description": "Video width and height (diameter of the video message) as defined by sender"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the video in seconds as defined by sender"
        },
        "thumb": {
          "$ref": "#/$defs/PhotoSize"
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes."
        }
      }
    },
    "Voice": {
      "type": "object",
      "description": "This object represents a voice note.",
      "required": [
        "file_id",
        "file_unique_id",
        "duration"
      ],
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the audio in seconds as defined by sender"
        },
        "mime_type": {
          "type": "string",
          "description": "MIME type of the file as defined by sender"
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes."
        }
      }
    },
    "Contact": {
      "type": "object",
      "description": "This object represents a voice note.",
      "required": [
        "phone_number",
        "first_name"
      ],
      "properties": {
        "phone_number": {
          "type": "string",
          "description": "Contact's phone number"
        },
        "first_name": {
          "type": "string",
          "description": "Contact's first name"
        },
        "last_name": {
          "type": "string",
          "description": "Contact's last name"
        },
        "user_id": {
          "type": "integer",
          "description": "Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier."
        },
        "vcard": {
          "type": "string",
          "description": "Additional data about the contact in the form of a vCard"
        }
      }
    },
    "Dice": {
      "type": "object",
      "description": "This object represents a voice note.",
      "properties": {
        "emoji": {
          "type": "string",
          "description": "Emoji on which the dice throw animation is based"
        },
        "value": {
          "type": "integer",
          "description": "Value of the dice, 1-6 for some base emoji, 1-5 for some other base emoji, 1-64 for jackpot base emoji"
        }
      }
    },
    "PollOption": {
      "type": "object",
      "description": "This object contains information about one answer option in a poll.",
      "properties": {
        "text": {
          "type": "string",
          "description": "Option text, 1-100 characters"
        },
        "voter_count": {
          "type": "integer",
          "description": "Number of users that voted for this option"
        }
      }
    },
    "PollAnswer": {
      "type": "object",
      "description": "This object represents an answer of a user in a non-anonymous poll.",
      "properties": {
        "poll_id": {
          "type": "string",
          "description": "Unique poll identifier"
        },
        "user": {
          "$ref": "#/$defs/User"
        },
        "option_ids": {
          "type": "array",
          "description": "0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote."
        }
      }
    },
    "Poll": {
      "type": "object",
      "description": "This object contains information about a poll.",
      "required": [
        "id",
        "question"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique poll identifier"
        },
        "question": {
          "type": "string",
          "description": "Poll question, 1-300 characters"
        },
        "options": {
          "type": "array",
          "description": "List of poll options",
          "items": {
            "$ref": "#/$defs/PollOption"
          }
        },
        "total_voter_count": {
          "type": "integer",
          "description": "Total number of users that voted in the poll"
        },
        "is_closed": {
          "type": "boolean",
          "description": "True, if the poll is closed"
        },
        "is_anonymous": {
          "type": "boolean",
          "description": "True, if the poll is anonymous"
        },
        "_type": {
          "type": "string",
          "description": "Poll type, currently can be “regular” or “quiz”"
        },
        "allows_multiple_answers": {
          "type": "boolean",
          "description": "True, if the poll allows multiple answers"
        },
        "correct_option_id": {
          "type": "integer",
          "description": "0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot."
        },
        "explanation": {
          "type": "string",
          "description": "Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters"
        },
        "explanation_entities": {
          "type": "array",
          "description": "Special entities like usernames, URLs, bot commands, etc. that appear in the explanation",
          "items": {
            "$ref": "#/$defs/MessageEntity"
          }
        },
        "open_period": {
          "type": "integer",
          "description": "Amount of time in seconds the poll will be active after creation"
        },
        "close_date": {
          "type": "integer",
          "description": "Point in time (Unix timestamp) when the poll will be automatically closed"
        }
      }
    },
    "Location": {
      "type": "object",
      "description": "This object represents a point on the map.",
      "properties": {
        "longitude": {
          "type": "integer",
          "description": "Longitude as defined by sender"
        },
        "latitude": {
          "type": "integer",
          "description": "Latitude as defined by sender"
        },
        "horizontal_accuracy": {
          "type": "integer",
          "description": "The radius of uncertainty for the location, measured in meters; 0-1500"
        },
        "live_period": {
          "type": "integer",
          "description": "Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only."
        },
        "heading": {
          "type": "integer",
          "description": "The direction in which user is moving, in degrees; 1-360. For active live locations only."
        },
        "proximity_alert_radius": {
          "type": "integer",
          "description": "Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only."
        }
      }
    },
    "Venue": {
      "type": "object",
      "description": "This object represents a venue.",
      "properties": {
        "location": {
          "$ref": "#/$defs/Location"
        },
        "title": {
          "type": "string",
          "description": "Name of the venue"
        },
        "address": {
          "type": "string",
          "description": "Address of the venue"
        },
        "foursquare_id": {
          "type": "string",
          "description": "Foursquare identifier of the venue"
        },
        "foursquare_type": {
          "type": "string",
          "description": "Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)"
        },
        "google_place_id": {
          "type": "string",
          "description": "Google Places identifier of the venue"
        },
        "google_place_type": {
          "type": "string",
          "description": "Google Places type of the venue. (See supported types.)"
        }
      }
    },
    "WebAppData": {
      "type": "object",
      "description": "Contains data sent from a Web App to the bot.",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data. Be aware that a bad client can send arbitrary data in this field."
        },
        "button_text": {
          "type": "string",
          "description": "Text of theweb_appkeyboard button, from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field."
        }
      }
    },
    "WebAppInfo": {
      "type": "object",
      "description": "Contains information about a Web App.",
      "properties": {
        "url": {
          "type": "string",
          "description": "An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps"
        }
      }
    },
    "ProximityAlertTriggered": {
      "type": "object",
      "description": "This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.",
      "properties": {
        "traveler": {
          "$ref": "#/$defs/User"
        },
        "watcher": {
          "$ref": "#/$defs/User"
        },
        "distance": {
          "type": "integer",
          "description": "The distance between the users"
        }
      }
    },
    "MessageAutoDeleteTimerChanged": {
      "type": "object",
      "description": "This object represents a service message about a change in auto-delete timer settings.",
      "properties": {
        "message_auto_delete_time": {
          "type": "integer",
          "description": "New auto-delete time for messages in the chat; in seconds"
        }
      }
    },
    "VoiceChatScheduled": {
      "type": "object",
      "description": "This object represents a service message about a video chat scheduled in the chat.",
      "properties": {
        "start_date": {
          "type": "integer",
          "description": "Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator"
        }
      }
    },
    "VoiceChatStarted": {
      "type": "object",
      "description": "This object represents a service message about a video chat started in the chat. Currently holds no information."
    },
    "VoiceChatEnded": {
      "type": "object",
      "description": "This object represents a service message about a video chat ended in the chat.",
      "properties": {
        "duration": {
          "type": "integer",
          "description": "Video chat duration in seconds"
        }
      }
    },
    "VoiceChatParticipantsInvited": {
      "type": "object",
      "description": "This object represents a service message about new members invited to a video chat.",
      "properties": {
        "users": {
          "type": "array",
          "description": "New members that were invited to the video chat",
          "items": {
            "$ref": "#/$defs/User"
          }
        }
      }
    },
    "UserProfilePhotos": {
      "type": "object",
      "description": "This object represent a user's profile pictures.",
      "properties": {
        "total_count": {
          "type": "integer",
          "description": "Total number of profile pictures the target user has"
        },
        "photos": {
          "type": "array",
          "description": "Requested profile pictures (in up to 4 sizes each)",
          "items": {
            "$ref": "#/$defs/PhotoSize"
          }
        }
      }
    },
    "File": {
      "type": "object",
      "description": "This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile",
      "required": [
        "file_id",
        "file_unique_id"
      ],
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes, if known"
        },
        "file_path": {
          "type": "string",
          "description": "File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file."
        }
      }
    },
    "ReplyKeyboardMarkup": {
      "type": "object",
      "description": "This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).",
      "properties": {
        "keyboard": {
          "type": "array",
          "description": "Array of button rows, each represented by an Array of KeyboardButton objects",
          "items": {
            "$ref": "#/$defs/KeyboardButton"
          }
        },
        "resize_keyboard": {
          "type": "boolean",
          "description": "Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard."
        },
        "one_time_keyboard": {
          "type": "boolean",
          "description": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to false."
        },
        "input_field_placeholder": {
          "type": "string",
          "description": "The placeholder to be shown in the input field when the keyboard is active; 1-64 characters"
        },
        "selective": {
          "type": "boolean",
          "description": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message. Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard."
        }
      }
    },
    "KeyboardButton": {
      "type": "object",
      "description": "This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields web_app, request_contact, request_location, and request_poll are mutually exclusive.",
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed"
        },
        "request_contact": {
          "type": "boolean",
          "description": "If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only."
        },
        "request_location": {
          "type": "boolean",
          "description": "If True, the user's current location will be sent when the button is pressed. Available in private chats only."
        },
        "request_poll": {
          "$ref": "#/$defs/KeyboardButtonPollType"
        },
        "web_app": {
          "$ref": "#/$defs/WebAppInfo"
        }
      }
    },
    "KeyboardButtonPollType": {
      "type": "object",
      "description": "This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.",
      "properties": {
        "_type": {
          "type": "string",
          "description": "If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type."
        }
      }
    },
    "ReplyKeyboardRemove": {
      "type": "object",
      "description": "Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).",
      "properties": {
        "remove_keyboard": true,
        "selective": {
          "type": "boolean",
          "description": "Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.\n\nExample: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet."
        }
      }
    },
    "InlineKeyboardMarkup": {
      "type": "object",
      "description": "This object represents an inline keyboard that appears right next to the message it belongs to.",
      "properties": {
        "inline_keyboard": {
          "type": "array",
          "description": "Array of button rows, each represented by an Array of InlineKeyboardButton objects",
          "items": {
            "$ref": "#/$defs/InlineKeyboardButton"
          }
        }
      }
    },
    "InlineKeyboardButton": {
      "type": "object",
      "description": "This object represents one button of an inline keyboard. You must use exactly one of the optional fields.",
      "properties": {
        "text": {
          "type": "string",
          "description": "Label text on the button"
        },
        "url": {
          "type": "string",
          "description": "HTTP or tg:// url to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their ID without using a username, if this is allowed by their privacy settings."
        },
        "callback_data": {
          "type": "string",
          "description": "Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes"
        },
        "web_app": {
          "$ref": "#/$defs/WebAppInfo"
        },
        "login_url": {
          "$ref": "#/$defs/LoginUrl"
        },
        "switch_inline_query": {
          "type": "string",
          "description": "If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.\n\nNote: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pm… actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen."
        },
        "switch_inline_query_current_chat": {
          "type": "string",
          "description": "If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.\n\nThis offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options."
        },
        "callback_game": true,
        "pay": {
          "type": "boolean",
          "description": "Specify True, to send a Pay button.\n\nNOTE: This type of button must always be the first button in the first row and can only be used in invoice messages."
        }
      }
    },
    "LoginUrl": {
      "type": "object",
      "description": "This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram.",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "type": "string",
          "description": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.\n\nNOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization."
        },
        "forward_text": {
          "type": "string",
          "description": "New text of the button in forwarded messages."
        },
        "bot_username": {
          "type": "string",
          "description": "Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details."
        },
        "request_write_access": {
          "type": "boolean",
          "description": "Pass True to request the permission for your bot to send messages to the user."
        }
      }
    },
    "CallbackQuery": {
      "type": "object",
      "description": "This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for this query"
        },
        "from": {
          "$ref": "#/$defs/User"
        },
        "message": {
          "$ref": "#/$defs/Message"
        },
        "inline_message_id": {
          "type": "string",
          "description": "Identifier of the message sent via the bot in inline mode, that originated the query."
        },
        "chat_instance": {
          "type": "string",
          "description": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games."
        },
        "data": {
          "type": "string",
          "description": "Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field."
        },
        "game_short_name": {
          "type": "string",
          "description": "Short name of a Game to be returned, serves as the unique identifier for the game"
        }
      }
    },
    "ForceReply": {
      "type": "object",
      "description": "Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.",
      "properties": {
        "force_reply": true,
        "input_field_placeholder": {
          "type": "string",
          "description": "The placeholder to be shown in the input field when the reply is active; 1-64 characters"
        },
        "selective": {
          "type": "boolean",
          "description": "Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message."
        }
      }
    },
    "ChatPhoto": {
      "type": "object",
      "description": "This object represents a chat photo.",
      "properties": {
        "small_file_id": {
          "type": "string",
          "description": "File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed."
        },
        "small_file_unique_id": {
          "type": "string",
          "description": "Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "big_file_id": {
          "type": "string",
          "description": "File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed."
        },
        "big_file_unique_id": {
          "type": "string",
          "description": "Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        }
      }
    },
    "ChatInviteLink": {
      "type": "object",
      "description": "Represents an invite link for a chat.",
      "properties": {
        "invite_link": {
          "type": "string",
          "description": "The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with “…”."
        },
        "creator": {
          "$ref": "#/$defs/User"
        },
        "creates_join_request": {
          "type": "boolean",
          "description": "True, if users joining the chat via the link need to be approved by chat administrators"
        },
        "is_primary": {
          "type": "boolean",
          "description": "True, if the link is primary"
        },
        "is_revoked": {
          "type": "string",
          "description": "True, if the link is revoked"
        },
        "name": {
          "type": "string",
          "description": "Invite link name"
        },
        "expire_date": {
          "type": "integer",
          "description": "Point in time (Unix timestamp) when the link will expire or has been expired"
        },
        "member_limit": {
          "type": "integer",
          "description": "Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999"
        },
        "pending_join_request_count": {
          "type": "integer",
          "description": "Number of pending join requests created using this link"
        }
      }
    },
    "ChatMember": {
      "type": "object",
      "description": "This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported",
      "properties": {
        "status": {
          "type": "string",
          "description": "The member's status in the chat, always “creator”"
        },
        "user": {
          "$ref": "#/$defs/User"
        }
      }
    },
    "ChatMemberOwner": {
      "type": "object",
      "extends": [
        "#/$defs/ChatMember"
      ],
      "status": "creator",
      "properties": {
        "is_anonymous": {
          "type": "boolean",
          "description": "True, if the user's presence in the chat is hidden"
        },
        "custom_title": {
          "type": "string",
          "description": "Custom title for this user"
        }
      }
    },
    "ChatMemberAdministrator": {
      "type": "object",
      "description": "Represents a chat member that has some additional privileges.",
      "extends": [
        "#/$defs/ChatMember"
      ],
      "status": "administrator",
      "properties": {
        "can_be_edited": {
          "type": "boolean",
          "description": "True, if the bot is allowed to edit administrator privileges of that user"
        },
        "can_manage_chat": {
          "type": "boolean",
          "description": "True, if the user's presence in the chat is hidden"
        },
        "can_delete_messages": {
          "type": "boolean",
          "description": "True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege"
        },
        "can_manage_voice_chats": {
          "type": "boolean",
          "description": "True, if the administrator can delete messages of other users"
        },
        "can_restrict_members": {
          "type": "boolean",
          "description": "True, if the administrator can manage video chats"
        },
        "can_promote_members": {
          "type": "boolean",
          "description": "True, if the administrator can restrict, ban or unban chat members"
        },
        "can_change_info": {
          "type": "boolean",
          "description": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)"
        },
        "can_invite_users": {
          "type": "boolean",
          "description": "True, if the user is allowed to change the chat title, photo and other settings"
        },
        "can_post_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to invite new users to the chat"
        },
        "can_edit_messages": {
          "type": "boolean",
          "description": "True, if the administrator can post in the channel; channels only"
        },
        "can_pin_messages": {
          "type": "boolean",
          "description": "True, if the administrator can edit messages of other users and can pin messages; channels only"
        },
        "is_anonymous": {
          "type": "boolean",
          "description": "True, if the user is allowed to pin messages; groups and supergroups only"
        },
        "custom_title": {
          "type": "string",
          "description": "Custom title for this user"
        }
      }
    },
    "ChatMemberMember": {
      "type": "object",
      "description": "Represents a chat member that has no additional privileges or restrictions.",
      "extends": [
        "#/$defs/ChatMember"
      ],
      "status": "member"
    },
    "ChatMemberRestricted": {
      "type": "object",
      "description": "Represents a chat member that is under certain restrictions in the chat. Supergroups only.",
      "extends": [
        "#/$defs/ChatMember"
      ],
      "status": "restricted",
      "properties": {
        "is_member": {
          "type": "boolean",
          "description": "True, if the user is a member of the chat at the moment of the request"
        },
        "can_change_info": {
          "type": "boolean",
          "description": "True, if the user is allowed to change the chat title, photo and other settings"
        },
        "can_invite_users": {
          "type": "boolean",
          "description": "True, if the user is allowed to invite new users to the chat"
        },
        "can_pin_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to pin messages"
        },
        "can_send_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to send text messages, contacts, locations and venues"
        },
        "can_send_media_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes"
        },
        "can_send_polls": {
          "type": "boolean",
          "description": "True, if the user is allowed to send polls"
        },
        "can_send_other_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to send animations, games, stickers and use inline bots"
        },
        "can_add_web_page_previews": {
          "type": "boolean",
          "description": "True, if the user is allowed to add web page previews to their messages"
        },
        "until_date": {
          "type": "integer",
          "description": "Date when restrictions will be lifted for this user; unix time. If 0, then the user is restricted forever"
        }
      }
    },
    "ChatMemberLeft": {
      "type": "object",
      "description": "Represents a chat member that isn't currently a member of the chat, but may join it themselves.",
      "extends": [
        "#/$defs/ChatMember"
      ],
      "status": "left"
    },
    "ChatMemberBanned": {
      "type": "object",
      "description": "Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.",
      "extends": [
        "#/$defs/ChatMember"
      ],
      "status": "kicked",
      "properties": {
        "until_date": {
          "$ref": "Date when restrictions will be lifted for this user; unix time. If 0, then the user is banned forever#"
        }
      }
    },
    "ChatMemberUpdated": {
      "type": "object",
      "description": "This object represents changes in the status of a chat member.",
      "extends": [
        "#/$defs/ChatMember"
      ],
      "properties": {
        "chat": {
          "$ref": "#/$defs/Chat"
        },
        "from": {
          "$ref": "#/$defs/User"
        },
        "date": {
          "type": "integer",
          "description": "Date the change was done in Unix time"
        },
        "old_chat_member": {
          "$ref": "#/$defs/ChatMember"
        },
        "new_chat_member": {
          "$ref": "#/$defs/ChatMember"
        },
        "invite_link": {
          "$ref": "#/$defs/ChatInviteLink"
        }
      }
    },
    "ChatJoinRequest": {
      "type": "object",
      "description": "Represents a join request sent to a chat.",
      "properties": {
        "chat": {
          "$ref": "#/$defs/Chat"
        },
        "from": {
          "$ref": "#/$defs/User"
        },
        "date": {
          "type": "integer",
          "description": "Date the request was sent in Unix time"
        },
        "bio": {
          "type": "string",
          "description": "Bio of the user."
        },
        "invite_link": {
          "$ref": "#/$defs/ChatInviteLink"
        }
      }
    },
    "ChatPermissions": {
      "type": "object",
      "description": "Describes actions that a non-administrator user is allowed to take in a chat.",
      "properties": {
        "can_send_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to send text messages, contacts, locations and venues"
        },
        "can_send_media_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages"
        },
        "can_send_polls": {
          "type": "boolean",
          "description": "True, if the user is allowed to send polls, implies can_send_messages"
        },
        "can_send_other_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages"
        },
        "can_add_web_page_previews": {
          "type": "boolean",
          "description": "True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages"
        },
        "can_change_info": {
          "type": "boolean",
          "description": "True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups"
        },
        "can_invite_users": {
          "type": "boolean",
          "description": "True, if the user is allowed to invite new users to the chat"
        },
        "can_pin_messages": {
          "type": "boolean",
          "description": "True, if the user is allowed to pin messages. Ignored in public supergroups"
        }
      }
    },
    "ChatLocation": {
      "type": "object",
      "description": "Represents a location to which a chat is connected.",
      "properties": {
        "location": {
          "$ref": "#/$defs/Location"
        },
        "address": {
          "type": "string",
          "description": "Location address; 1-64 characters, as defined by the chat owner"
        }
      }
    },
    "BotCommand": {
      "type": "object",
      "description": "This object represents a bot command.",
      "properties": {
        "command": {
          "type": "string",
          "description": "Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores."
        },
        "description": {
          "type": "string",
          "description": "Description of the command; 1-256 characters."
        }
      }
    },
    "BotCommandScope": {
      "type": "object",
      "description": "This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:\n\n    BotCommandScopeDefault\n    BotCommandScopeAllPrivateChats\n    BotCommandScopeAllGroupChats\n    BotCommandScopeAllChatAdministrators\n    BotCommandScopeChat\n    BotCommandScopeChatAdministrators\n    BotCommandScopeChatMember",
      "properties": {
        "_type": {
          "type": "string",
          "description": "Scope type"
        }
      }
    },
    "BotCommandScopeDefault": {
      "type": "object",
      "description": "Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user.",
      "extends": [
        "#/$defs/BotCommandScope"
      ],
      "_type": "default"
    },
    "BotCommandScopeAllPrivateChats": {
      "type": "object",
      "description": "Represents the scope of bot commands, covering all private chats.",
      "extends": [
        "#/$defs/BotCommandScope"
      ],
      "_type": "all_private_chats"
    },
    "BotCommandScopeAllGroupChats": {
      "type": "object",
      "description": "Represents the scope of bot commands, covering all group and supergroup chats.",
      "extends": [
        "#/$defs/BotCommandScope"
      ],
      "_type": "all_group_chats"
    },
    "BotCommandScopeAllChatAdministrators": {
      "type": "object",
      "description": "Represents the scope of bot commands, covering all group and supergroup chat administrators.",
      "extends": [
        "#/$defs/BotCommandScope"
      ],
      "_type": "all_chat_administrators"
    },
    "BotCommandScopeChat": {
      "type": "object",
      "description": "Represents the scope of bot commands, covering a specific chat.",
      "extends": [
        "#/$defs/BotCommandScope"
      ],
      "_type": "chat",
      "properties": {
        "chat_id": {
          "type": "string",
          "description": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
        }
      }
    },
    "BotCommandScopeChatAdministrators": {
      "type": "object",
      "description": "Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.",
      "extends": [
        "#/$defs/BotCommandScopeChat"
      ],
      "_type": "chat_administrators"
    },
    "BotCommandScopeChatMember": {
      "type": "object",
      "extends": [
        "#/$defs/BotCommandScopeChat"
      ],
      "_type": "default",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "Unique identifier of the target user"
        }
      }
    },
    "ResponseParameters": {
      "type": "object",
      "description": "Contains information about why a request was unsuccessful.",
      "properties": {
        "migrate_to_chat_id": {
          "type": "integer",
          "description": "The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
        },
        "retry_after": {
          "type": "integer",
          "description": "In case of exceeding flood control, the number of seconds left to wait before the request can be repeated"
        }
      }
    },
    "InputMedia": {
      "type": "object",
      "description": "This object represents the content of a media message to be sent. It should be one of\n\n    InputMediaAnimation\n    InputMediaDocument\n    InputMediaAudio\n    InputMediaPhoto\n    InputMediaVideo",
      "required": [
        "type",
        "media"
      ],
      "properties": {
        "_type": {
          "type": "string",
          "description": "Type of the result"
        },
        "media": {
          "type": "string",
          "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name."
        },
        "caption": {
          "type": "string",
          "description": "Caption of the photo to be sent, 0-1024 characters after entities parsing"
        },
        "parse_mode": {
          "type": "string",
          "description": "Mode for parsing entities in the photo caption. See formatting options for more details."
        },
        "caption_entities": {
          "type": "array",
          "description": "List of special entities that appear in the caption, which can be specified instead of parse_mode",
          "items": {
            "$ref": "#/$defs/MessageEntity"
          }
        }
      }
    },
    "InputMediaPhoto": {
      "type": "object",
      "description": "Represents a photo to be sent.",
      "extends": [
        "#/$defs/InputMedia"
      ],
      "_type": "photo"
    },
    "InputMediaVideo": {
      "type": "object",
      "description": "Represents a video to be sent.",
      "extends": [
        "#/$defs/InputMedia"
      ],
      "_type": "video",
      "properties": {
        "thumb": {
          "$ref": "#/$defs/InputFile"
        },
        "width": {
          "type": "integer",
          "description": "Video width"
        },
        "height": {
          "type": "integer",
          "description": "Video height"
        },
        "duration": {
          "type": "integer",
          "description": "Video duration in seconds"
        },
        "supports_streaming": {
          "type": "boolean",
          "description": "Pass True, if the uploaded video is suitable for streaming"
        }
      }
    },
    "InputMediaAnimation": {
      "type": "object",
      "description": "Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.",
      "extends": [
        "#/$defs/InputMedia"
      ],
      "_type": "animation",
      "properties": {
        "width": {
          "type": "integer",
          "description": "Animation width"
        },
        "height": {
          "type": "integer",
          "description": "Animation height"
        },
        "duration": {
          "type": "integer",
          "description": "Animation duration in seconds"
        }
      }
    },
    "InputMediaAudio": {
      "type": "object",
      "description": "Represents an audio file to be treated as music to be sent.",
      "extends": [
        "#/$defs/InputMedia"
      ],
      "_type": "audio",
      "properties": {
        "duration": {
          "type": "integer",
          "description": "Duration of the audio in seconds"
        },
        "performer": {
          "type": "string",
          "description": "Performer of the audio"
        },
        "title": {
          "type": "string",
          "description": "Title of the audio"
        }
      }
    },
    "InputMediaDocument": {
      "type": "object",
      "description": "Represents a general file to be sent.",
      "extends": [
        "#/$defs/InputMedia"
      ],
      "_type": "document",
      "properties": {
        "disable_content_type_detection": {
          "type": "boolean",
          "description": "Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album."
        }
      }
    },
    "InputFile": {
      "type": "object",
      "description": "This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser."
    },
    "Sticker": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "width": {
          "type": "integer",
          "description": "Sticker width"
        },
        "height": {
          "type": "integer",
          "description": "Sticker height"
        },
        "is_animated": {
          "type": "boolean",
          "description": "True, if the sticker is animated"
        },
        "is_video": {
          "type": "boolean",
          "description": "True, if the sticker is a video sticker"
        },
        "thumb": {
          "$ref": "#/$defs/PhotoSize"
        },
        "emoji": {
          "type": "string",
          "description": "Emoji associated with the sticker"
        },
        "set_name": {
          "type": "string",
          "description": "Name of the sticker set to which the sticker belongs"
        },
        "mask_position": {
          "$ref": "#/$defs/MaskPosition"
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes"
        }
      }
    },
    "StickerSet": {
      "type": "object",
      "description": "This object represents a sticker set.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Sticker set name"
        },
        "title": {
          "type": "string",
          "description": "Sticker set title"
        },
        "is_animated": {
          "type": "boolean",
          "description": "True, if the sticker set contains animated stickers"
        },
        "is_video": {
          "type": "boolean",
          "description": "True, if the sticker set contains video stickers"
        },
        "contains_masks": {
          "type": "boolean",
          "description": "True, if the sticker set contains masks"
        },
        "stickers": {
          "type": "array",
          "description": "List of all set stickers",
          "items": {
            "$ref": "#/$defs/Sticker"
          }
        },
        "thumb": {
          "$ref": "#/$defs/PhotoSize"
        }
      }
    },
    "MaskPosition": {
      "type": "object",
      "description": "This object describes the position on faces where a mask should be placed by default.",
      "properties": {
        "point": {
          "type": "string",
          "description": "The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.",
          "enum": [
            "forehead",
            "eyes",
            "mouth",
            "chin"
          ]
        },
        "x_shift": {
          "type": "integer",
          "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position."
        },
        "y_shift": {
          "type": "integer",
          "description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position."
        },
        "scale": {
          "type": "integer",
          "description": "Mask scaling coefficient. For example, 2.0 means double size."
        }
      }
    },
    "Game": {
      "type": "object",
      "description": "This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the game"
        },
        "description": {
          "type": "string",
          "description": "Description of the game"
        },
        "photo": {
          "type": "array",
          "description": "Photo that will be displayed in the game message in chats.",
          "items": {
            "$ref": "#/$defs/PhotoSize"
          }
        },
        "text": {
          "type": "string",
          "description": "Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters."
        },
        "text_entities": {
          "type": "array",
          "description": "Special entities that appear in text, such as usernames, URLs, bot commands, etc.",
          "items": {
            "$ref": "#/$defs/MessageEntity"
          }
        },
        "animation": {
          "$ref": "#/$defs/Animation"
        }
      }
    },
    "Invoice": {
      "type": "object",
      "description": "This object contains basic information about an invoice.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Product name"
        },
        "description": {
          "type": "string",
          "description": "Product description"
        },
        "start_parameter": {
          "type": "string",
          "description": "Unique bot deep-linking parameter that can be used to generate this invoice"
        },
        "currency": {
          "type": "string",
          "description": "Three-letter ISO 4217 currency code"
        },
        "total_amount": {
          "type": "string",
          "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
        }
      }
    },
    "ShippingAddress": {
      "type": "object",
      "description": "This object represents a shipping address.",
      "properties": {
        "country_code": {
          "type": "string",
          "description": "ISO 3166-1 alpha-2 country code"
        },
        "state": {
          "type": "string",
          "description": "State, if applicable"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "street_line1": {
          "type": "string",
          "description": "First line for the address"
        },
        "street_line2": {
          "type": "string",
          "description": "Second line for the address"
        },
        "post_code": {
          "type": "string",
          "description": "Address post code"
        }
      }
    },
    "OrderInfo": {
      "type": "object",
      "description": "This object represents information about an order.",
      "properties": {
        "name": {
          "type": "string",
          "description": "User name"
        },
        "phone_number": {
          "type": "string",
          "description": "User's phone number"
        },
        "email": {
          "type": "string",
          "description": "User email"
        },
        "shipping_address": {
          "$ref": "#/$defs/ShippingAddress"
        }
      }
    },
    "ShippingOption": {
      "type": "object",
      "description": "This object represents one shipping option.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Shipping option identifier"
        },
        "title": {
          "type": "string",
          "description": "Option title"
        },
        "prices": {
          "type": "array",
          "description": "List of price portions"
        }
      }
    },
    "SuccessfulPayment": {
      "type": "object",
      "description": "This object contains basic information about a successful payment.",
      "properties": {
        "currency": {
          "type": "string",
          "description": "Three-letter ISO 4217 currency code"
        },
        "total_amout": {
          "type": "integer",
          "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
        },
        "invoice_payload": {
          "type": "string",
          "description": "Bot specified invoice payload"
        },
        "shipping_option_id": {
          "type": "string",
          "description": "Identifier of the shipping option chosen by the user"
        },
        "order_info": {
          "$ref": "#/$defs/OrderInfo"
        },
        "telegram_payment_charge_id": {
          "type": "string",
          "description": "Telegram payment identifier"
        },
        "provider_payment_charge_id": {
          "type": "string",
          "description": "Provider payment identifier"
        }
      }
    },
    "PassportData": {
      "type": "object",
      "description": "Contains information about Telegram Passport data shared with the bot by the user.",
      "properties": {
        "data": {
          "type": "array",
          "description": "Array with information about documents and other Telegram Passport elements that was shared with the bot",
          "items": {
            "$ref": "#/$defs/EncryptedPassportElement"
          }
        },
        "credentials": {
          "$ref": "#/$defs/EncryptedCredentials"
        }
      }
    },
    "PassportFile": {
      "type": "object",
      "description": "This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Identifier for this file, which can be used to download or reuse the file"
        },
        "file_unique_id": {
          "type": "string",
          "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
        },
        "file_size": {
          "type": "integer",
          "description": "File size in bytes"
        },
        "file_date": {
          "type": "integer",
          "description": "Unix time when the file was uploaded"
        }
      }
    },
    "EncryptedPassportElement": {
      "type": "object",
      "description": "Contains information about documents or other Telegram Passport elements shared with the bot by the user.",
      "properties": {
        "_type": {
          "type": "string",
          "description": "Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”, “phone_number”, “email”",
          "enum": [
            "personal_details",
            "passport",
            "driver_license",
            "identity_card",
            "internal_passport",
            "address",
            "utility_bill",
            "bank_statement",
            "rental_agreement",
            "passport_registration",
            "temporary_registration",
            "phone_number",
            "email"
          ]
        },
        "data": {
          "type": "string",
          "description": "Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types. Can be decrypted and verified using the accompanying EncryptedCredentials."
        },
        "phone_number": {
          "type": "string",
          "description": "User's verified phone number, available only for “phone_number” type"
        },
        "email": {
          "type": "string",
          "description": "User's verified email address, available only for “email” type"
        },
        "files": {
          "type": "array",
          "description": "Array of encrypted files with documents provided by the user, available for “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying EncryptedCredentials.",
          "items": {
            "$ref": "#/$defs/PassportFile"
          }
        },
        "front_side": {
          "$ref": "#/$defs/PassportFile"
        },
        "reverse_side": {
          "$ref": "#/$defs/PassportFile"
        },
        "selfie": {
          "$ref": "#/$defs/PassportFile"
        },
        "translation": {
          "type": "array",
          "description": "Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying EncryptedCredentials.",
          "items": {
            "$ref": "#/$defs/PassportFile"
          }
        },
        "hash": {
          "type": "string",
          "description": "Base64-encoded element hash for using in PassportElementErrorUnspecified"
        }
      }
    },
    "EncryptedCredentials": {
      "type": "object",
      "description": "Contains data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes.",
      "properties": {
        "data": {
          "type": "string",
          "description": "Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication"
        },
        "hash": {
          "type": "string",
          "description": "Base64-encoded data hash for data authentication"
        },
        "secret": {
          "type": "string",
          "description": "Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption"
        }
      }
    }
  }
}